package hsc

import (
	"fmt"
	"strings"
	"sync"

	"github.com/marcozac/hubspot-go"
	"golang.org/x/tools/go/packages"
)

type Graph struct {
	// OutDir is the output directory for the generated files.
	//
	// Default: "."
	OutDir string

	// PackageName is the name of the package for the generated files.
	//
	// Default: "hubspot"
	PackageName string

	// Header is the header for the generated files.
	//
	// Default: "Code generated by hsc. DO NOT EDIT."
	Header string

	// Nodes is a list of nodes in the graph.
	Nodes []*Node
}

type Node struct {
	// Name is the name of the node.
	Name string

	// Imports is a map formatted as "path:alias" for the imports of the node.
	Imports map[string]string

	// Objects is a list of objects of the node.
	Objects []*Object

	mu sync.RWMutex
}

func (n *Node) resolveImports() error {
	if n.Imports == nil {
		n.Imports = make(map[string]string)
	}
	for _, o := range n.Objects {
		if o.EndpointTarget != nil {
			n.mu.RLock()
			_, ok := n.Imports[o.EndpointTarget.Package]
			n.mu.RUnlock()
			if !ok {
				n.mu.Lock()
				pkgs, err := packages.Load(&packages.Config{}, o.EndpointTarget.Package)
				if err != nil {
					return fmt.Errorf("load packages: %w", err)
				}
				if l := len(pkgs); l == 0 || l > 1 {
					return fmt.Errorf("unexpected number of packages: %d", l)
				}
				pkg := pkgs[0]
				var i int
				alias := pkg.Name
			importsLoop:
				for _, a := range n.Imports {
					if alias == a {
						i++
						alias = fmt.Sprintf("%s_%d", pkg.Name, i)
						goto importsLoop // restart the loop and check the new alias
					}
				}
				o.EndpointTarget.alias = alias // update the alias of the endpoint target
				n.Imports[o.EndpointTarget.Package] = alias
				n.mu.Unlock()
			}
		}
	}
	return nil
}

type Object struct {
	// Name is the name of the object.
	//
	// Example: "Contact"
	Name string

	// Properties is a list of properties of the object.
	Properties []*Property

	// Endpoint is the endpoint of the object.
	//
	// Example: "https://api.hubapi.com/crm/v3/objects/contacts"
	Endpoint string

	// EndpointTarget is the target endpoint for the object.
	//
	// It is used if [Object.Endpoint] is empty.
	EndpointTarget *EndpointTarget
}

type Property struct {
	*hubspot.Property
	fieldName       string
	structFieldType string
}

// IsDefault returns true if the property is a HubSpot default property.
func (p Property) IsDefault() bool {
	return p.CreatedUserId == ""
}

func (p *Property) FieldName() string {
	if p.fieldName == "" {
		var sb strings.Builder
		ss := strings.Split(p.Name, "_")
		for _, s := range ss {
			if len(s) == 0 {
				// Keep the underscore if the string is empty.
				// It happens when the property name is, for example,
				// "hs__something". The underscore is kept to avoid
				// collisions with other properties.
				sb.WriteString("_")
				continue
			}
			sb.WriteString(strings.ToUpper(s[:1]))
			if len(s) > 1 {
				sb.WriteString(s[1:])
			}
		}
		p.fieldName = sb.String()
	}
	return p.fieldName
}

func (p *Property) StructFieldType() string {
	if p.structFieldType == "" {
		switch p.Type {
		case hubspot.PropertyTypeString, hubspot.PropertyTypePhoneNumber:
			p.structFieldType = "string"
		case hubspot.PropertyTypeNumber:
			// Set the type to Int64 for the hs_object_id property.
			//
			// Currently HubSpot uses int64 for Contact ID, this covers also the future case
			// where they might use int64 for other properties.
			//
			// See: https://developers.hubspot.com/changelog/increasing-the-size-of-contact-record-ids
			if p.Name == "hs_object_id" {
				p.structFieldType = "Int64"
			}
			p.structFieldType = "Int"
		case hubspot.PropertyTypeBool:
			p.structFieldType = "Bool"
		case hubspot.PropertyTypeDate:
			// must to be a pointer to respect the omitempty tag
			p.structFieldType = "*Date"
		case hubspot.PropertyTypeDateTime:
			// must to be a pointer to respect the omitempty tag
			p.structFieldType = "*DateTime"
		case hubspot.PropertyTypeEnumeration:
			switch p.FieldType {
			case hubspot.PropertyFieldTypeRadio, hubspot.PropertyFieldTypeSelect, hubspot.PropertyFieldTypeCalculationEquation:
				p.structFieldType = "string"
			case hubspot.PropertyFieldTypeBooleanCheckbox:
				p.structFieldType = "Bool"
			case hubspot.PropertyFieldTypeNumber:
				p.structFieldType = "Int"
			case hubspot.PropertyFieldTypeCheckbox, hubspot.PropertyFieldTypeCalculationRollup:
				p.structFieldType = "Enumeration"
			default:
				panic(fmt.Errorf("unknown property field type: %s", p.FieldType))
			}
		default:
			panic(fmt.Errorf("unknown property type: %s", p.Type))
		}
	}
	return p.structFieldType
}

func (p Property) JSONTag() string {
	return fmt.Sprintf("`json:\"%s,omitempty\"`", p.Name)
}

type EndpointTarget struct {
	// Name is the name of the endpoint target.
	//
	// It must be equal to an exported name in the endpoint package.
	//
	// Example: "Contacts" => github.com/marcozac/hubspot-go/endpoint.Contacts
	Name string

	// Package is the package of the endpoint target.
	//
	// Example: "github.com/marcozac/hubspot-go/endpoint"
	Package string

	// alias is the alias of the endpoint target used for imports.
	alias string
}

// Alias returns the alias of the endpoint target used for imports.
//
// Since the alias may be altered by [Node], this method should be called only
// after [Node.resolveImports] has been called or (better) in a template.
func (et *EndpointTarget) Alias() string {
	return et.alias
}
